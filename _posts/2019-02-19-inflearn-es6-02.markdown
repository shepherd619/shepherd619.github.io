---
layout: default
title:  "[함수형 프로그래밍과 JavaScript ES6+] - 이터레이터 프로토콜"
date:   2019-02-19 00:00:00
categories: main
---

# 함수형 프로그래밍과 JavaScript ES6+

## 함수형 자바스크립트 기본
### 평가와 일급
- 평가 : 코드가 계산(Evaluation) 되어 값을 만드는것
- 일급객체
    - 값으로 다룰 수 있다
    - 변수에 담을 수 있다
    - 함수의 인자로 사용될 수 있다
    - 함수의 리턴값으로 사용될 수 있다.
> 자바스크립트에서 함수는 일급 객체이다.  

즉, 조합성과 추상화의 도구로 함수가 이용된다는 것이다.
함수형 프로그래밍에서는 함수가 일급객체라는 성질을 이용하여 조합성을 만들어내고 추상화한다.

### 고차함수  

함수를 값으로 다루는 함수를 말한다.
1. 함수를 인자로 받아 실행하는 고차함수  
```javascript
const apply1 = f => f(1); // apply1은 고차함수
const add2 = a => a + 2;
console.log(apply1(add2)); // add2라는 함수를 인자로 받아 실행
```

```javascript
const times = (f, n) => { // times1은 고차함수
    let i = -1;
    while (++i < n) f(i);
}
times(console.log, 3); // console.log라는 함수를 인자로 받아 실행
times(a => console.log(a + 10), 3); // 익명함수를 인자로 받아 실행
```

2. 함수를 만들어 리턴하는 고차함수 (클로저를 만들어 리턴)
```javascript
const addMaker = a => b => a + b;

// 내가 헷갈려서 es3으로 풀어써봄
function addMaker (a) {
    // 아래 함수는 addMaker의 스코프도 기억한다
    return function (b) {
        return a + b;
    }
}

const add10 = addMaker(10);
console.log(add10(5));
console.log(add10(10));
```

위에서 addMaker는 클로저를 리턴하는 함수이다.  
여기서 클로저는, 리턴되는 함수가 addMaker의 스코프도 기억하고 있는것을 말한다. 함수가 자신이 생성될 당시의 환경을 기억하는것을 클로저라고 한다.  
> 함수가 함수를 리턴하는 형태는, 결국 클로저를 만들어 리턴하기 위함이다.


