---
layout: default
title:  "[함수형 프로그래밍과 JavaScript ES6+] - 이터레이터 프로토콜"
date:   2019-02-19 00:00:00
categories: main
---

# 순회와 이터러블
## es6이전과 이후의 리스트 순회  
### 기존
- `for` 문 : 배열값의 lenth 프로퍼티에 의존해서 **숫자 키(i)** 로 접근 후 순회하는 방식
- `for in` 문 : 객체의 속성들을 순회하는 구문
    - 루프 구문이 배열 요소들만을 순회하지 않는다. 대신 누군가에 의해 추가된 확장속성(expando)들도 순회한다.   
    예를 들어, 당신이 다루는 배열이 myArray.name 이라는 속성을 가지고 있다면,   
    이 루프는 배열 요소들 말고도 index == "name" 속성을 대상으로 한번 더 실행될 것이다.  
    뿐만 아니라 배열의 프로토타입 체인(prototype chain)도 순회할 것이다.  
        > for 또는 while등의 문(statement)으로 구성된 반복은 실행될 수는 있지만 값이 될 수 없습니다.   
        값이 될 수 없다는 것은 그 행위를 실행할 수 있을 뿐이지 다음과 같이 할 수는 없다는 것입니다.  
        [[es6] 연구노트 #2 – 명확한 반복처리](https://www.bsidesoft.com/?p=2862)  
        
        
```javascript
// 배열의 순회
const list = [1, 2, 3];
for (var i = 0; i < list.length; i++) {
    console.log(list[i]);
}
```
```javascript
// 유사배열의 순회
const str = 'abc';
for (var i = 0; i < str.length; i++) {
    console.log(str[i]);
}
```


### es6 이후
- 이터레이터/이터러블 프로토콜에 기반하여 `for of` 문으로 순회
- es6이전 대표적으로 사용되던 forEach 문은 `break`, `continue`, `return` 문과 함께 사용하지 못하였으나, `for of` 문은 가능하다 → 루프를 **값**으로도 사용 가능하게 됐다
- `for of` 문은 배열의 요소들, 즉 data를 순회하기 위한 구문
- [ES6 In Depth: 이터레이터(iterator)와 for-of 루프 구문](http://hacks.mozilla.or.kr/2015/08/es6-in-depth-iterators-and-the-for-of-loop/)  


```javascript
const list = [1, 2, 3];
for (const a of list) {
    console.log(a);
}
```
```javascript
const str = 'abc';
for (const a of str) {
    console.log(a);
}
```  

es6에서 js는 `Array`, `Set`, `Map` 이라는 내장 값들을 가지고있는데, 이 값들을 모두 `for of` 문으로 순회 가능하다. 왜냐하면 그 값들이 **이터러블**이기 때문이다. 그럼 이터러블이란 무엇일까?

## 이터러블/이터레이터 프로토콜
- **이터러블** : 이터레이터를 리턴하는 `[Symbol.iterator] ()` 를 가진 값
- **이터레이터** : `{value, done}` 객체를 리턴하는 `next()` 메서드를 가진 값
- **이러터블/이터레이터 프로토콜** : 이터러블을 `for of`, 전개 연산자 `...` 등과 함께 동작하도록 한 규약

### Symbol.iterator
- **Symbol**은 어떤 객체의 **key**로 사용될 수 있다. 
- [Symbol에 관한 내용은 아래로](##symbol)
- 그냥 `[iterator]` 가 아니라 `[Symbol.iterator]` 로 사용하는 이유는, 기존에 작성된, 혹은 작성될 코드와의 중복을 막기 위해서이다.
- 모든 객체에서 `[Symbol.iterator] ()` 를 실행하면 for of 문으로 순회가 가능하게 된다 ????
    > `Array`, `Map`, `Set`, 그리고 우리가 언급했던 모든 객체들은 공통적으로 이터레이터(iterator) 메소드를 제공합니다.  
      그리고 이터레이터 메소드를 제공할 수 있는 객체가 더 있습니다. 바로 당신이 원하는 모든 객체입니다.  
      당신이 어떤 객체에든 myObject.toString() 메소드를 추가하면 JS가 이를 통해 해당 객체를 문자열로 변환하는 방법을 알아내는 것과 마찬가지로,  
      어떤 객체에든 `myObject[Symbol.iterator] ()` 메소드를 추가하면 JS는 해당 객체를 어떻게 순회(loop)해야 하는지 알아냅니다.


```javascript
let array = [1, 2, 3];
array[Symbol.iterator] // ƒ values() { [native code] } → Array는 Symbol.iterator를 소유하고 있다
for (a of array) console.log(a); // 1 2 3

array[Symbol.iterator] = null; // 이터레이터를 null로 바꿈
for (a of array) console.log(a); // Uncaught TypeError: array is not iterable 
// → 이터레이터를 잃어 이터러블이 아니게 되었으므로 for of 순회가 불가능해졌다.
```
### 이터레이터의 동작 방식

```javascript
const array = [1, 2, 3];
let iterator = array[Symbol.iterator] (); // undefined
iterator.next(); // {value: 1, done: false}
iterator.next(); // {value: 2, done: false}
iterator.next(); // {value: 3, done: false}
iterator.next(); // {value: undefined, done: true}
```
- 이터레이터는 `{value, done}` 객체를 리턴하는 `next()` 메서드를 가진 값이라고 하였다.
- 이터레이터.next() 를 호출하면, 이터레이터는 자신이 가진 요소들을 하나씩 value로 반환하고, done은 false로 반환한다.
- 모슨 요소를 순회하고 난 후에 value는 undefined, done은 true가 된다.


## Symbol
Symbol은 **어떠한 값과도 다를것이 보장되는 키** 라고 할 수 있다.  
다만 문자열이나 넘버같은것은 아니다. 새로운 타입이다.  
  
### Symbol의 존재 이유
예를들어 내가 DOM.isMoving  이라는 속성을 만들고싶은데, 이 속성은 늘 기존이나 추후의 다른 코드와 충돌할 가능성이 있다.  
이에 대응하려면 말도안되는 속성명을(ex : jihyesIsMoving) 만들거나, 난수를 뽑아내는 메서드를 만들어 그 속성을 사용해야하는데, 이런 방법은 유효하겠지만 디버깅이 힘들고 가독성도 떨어지게된다.  
이러한 상황에 적합한것이 Symbol 이다.  
어떠한 변수에 Symbol을 호출한 값을 할당하는 순간 그 값은 유일한 키가 된다.  
그러니 심볼로 만든 키는 다른 키와 충돌할 우려가 전혀 없다.

### Symbol을 얻는 세가지 방법
1. `Symbol()` 을 호출한다.  
이 메소드는 호출될 때마다 새롭고 고유한 심볼을 리턴한다.
2. `Symbol.for(string)` 을 호출한다.  
이 메소드는 심볼 레지스트리(symbol registry)라고 불리는 심볼들의 목록을 참조한다.  
Symbol() 메소드가 만드는 고유한 심볼들과 달리, 심볼 레지스트리에 있는 심볼들은 공유된다.  
만약 당신이 Symbol.for("cat")을 30번 호출한다면, 이 메소드는 매번 같은 심볼을 리턴할 것이다.  
심볼 레지스트리는 여러 개의 웹 페이지들, 또는 같은 페이지에 있는 여러 개의 모듈들이 심볼을 공유해야 하는 경우 유용하다.
3. `Symbol.iterator` 처럼 표준에 의해 정의된 심볼을 사용한다.  
표준이 자체적으로 정의하는 심볼이 몇 개 있다. 표준에 의해 정의된 심볼들은 나름의 특별한 용도가 있다.

### Symbol의 특징  
- Symbol 함수의 인자로 넣는 값은 주석이 된다.
    ```javascript
    const symbol = Symbol('심볼');
    let a = {};
    a[symbol] = 1;
    console.log(a); // {Symbol(심볼): 1}
    symbol.toString(); // "Symbol(심볼)"
    ```
    - 심볼 값을 console로 찍거나,
    - 심볼 값을 문자로 바꾸거나,
    - 에러메시지에서 참조할 경우 이 문자열이 출력된다.  
    이것이 전부다.
- 심볼을 키로 갖는 속성은 키가 문자열이 아니라 심볼인것 뿐, 그것을 제외하면 일반 속성과 모든 면에서 동일하다.
- 그러나 심볼을 키로 갖는 속성은 obj.key 같이 dot을 사용한 접근은 불가하고, 반드시 [] 기호로 접근해야한다.
- 심볼은 한번 생성되면 변경할 수 없다
- 심볼에는 속성을 부여할 수 없다
- 각 심볼은 같은 주석을 갖고 있더라도 각자 고유하다.
- for in 루프는 문자열 key만 순회한다. 심볼키는 잡히지 않는다.
- 참고 : [ES6 In Depth: 심볼 (Symbol)](http://hacks.mozilla.or.kr/2015/09/es6-in-depth-symbols/)

